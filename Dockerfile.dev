# Use a Python image with uv pre-installed
FROM python:3.11-slim as base

ARG DEV=false
ENV PYDEVD_DISABLE_FILE_VALIDATION=1
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    g++ \
    curl \
    # Required for scientific and mathematical libraries, such as numpy and pandas
    gfortran \
    libopenblas-dev \
    openssl \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

COPY --from=ghcr.io/astral-sh/uv:latest /uv /usr/local/bin/uv

# Install the project into `/app`
WORKDIR /app

# Copy from the cache instead of linking since it's a mounted volume
ENV UV_LINK_MODE=copy

# Enable bytecode compilation
ENV UV_COMPILE_BYTECODE=1

# Prevent uv from accidentally downloading isolated Python builds
ENV UV_PYTHON_DOWNLOADS=never

# Declare the Python version to use
ENV UV_PYTHON=python3.11

# Declare `/app` as the target for `uv sync`.
# ? INFO  This caused a `failed to remove directory `/app`` error when running `uv sync`
# ENV UV_PROJECT_ENVIRONMENT=/app

# Install the project's dependencies using the lockfile and settings
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --frozen --no-install-project --no-dev

# Then, add the rest of the project source code and install it
ADD . /app

# Place executables in the environment at the front of the path
ENV PATH="/app/.venv/bin:$PATH"

# Reset the entrypoint, don't invoke `uv`
ENTRYPOINT []

# Expose debugging port
EXPOSE 5678

# Expose application port
EXPOSE 5555

# Run the application with hot reloading
CMD ["uv", "run", "uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "5555"]
